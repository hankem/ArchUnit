plugins {
    id 'archunit.base-conventions'
    id 'com.gradleup.shadow' version '8.3.6' apply false
    id 'com.github.spotbugs' version '6.1.7' apply false
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0" apply false
    id "com.diffplug.spotless" version "7.0.3" apply false
    id 'com.github.ben-manes.versions' version '0.52.0' apply false
}

def appAndSourceUrl = 'https://github.com/TNG/ArchUnit'

ext {
    year = "${Calendar.getInstance().get(Calendar.YEAR)}"
    app = [
            name   : 'ArchUnit',
            urls   : [
                    entry : appAndSourceUrl,
                    doc   : appAndSourceUrl,
                    issues: "${appAndSourceUrl}/issues",
                    source: appAndSourceUrl
            ],
            gitRepo: 'git@github.com:TNG/ArchUnit.git',
            license: [
                    name: 'The Apache Software License, Version 2.0',
                    url : 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            ]
    ]
    company = [
            name: 'TNG Technology Consulting GmbH',
            url : 'https://www.tngtech.com/'
    ]

    thirdPartyRelocationPackage = 'com.tngtech.archunit.thirdparty'
    asmRelocationPackage = "${thirdPartyRelocationPackage}.org.objectweb.asm"
    googleRelocationPackage = "${thirdPartyRelocationPackage}.com.google"

    dependency = [
            addGuava             : { dependencyHandler ->
                dependencyHandler(libs.guava) {
                    exclude module: 'listenablefuture'
                    exclude module: 'jspecify'
                    exclude module: 'error_prone_annotations'
                    exclude module: 'j2objc-annotations'
                }
            },

            // Dependencies for example projects / tests
            javaxAnnotationApi   : [group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'],
            springBeans          : [group: 'org.springframework', name: 'spring-beans', version: '5.3.23'],
            springBootLoader     : [group: 'org.springframework.boot', name: 'spring-boot-loader', version: '2.7.13'],
            jakartaInject        : [group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'],
            jakartaAnnotations   : [group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '2.1.1'],
            guice                : [group: 'com.google.inject', name: 'guice', version: '5.1.0'],
            // NOTE: The pure javaee-api dependencies are crippled, so to run any test we need to choose a full implementation provider
            geronimoEjb          : [group: 'org.apache.geronimo.specs', name: 'geronimo-ejb_3.1_spec', version: '1.0.2'],
            geronimoJpa          : [group: 'org.apache.geronimo.specs', name: 'geronimo-jpa_2.0_spec', version: '1.1'],
            jodaTime             : [group: 'joda-time', name: 'joda-time', version: '2.12.7'],
            joox                 : [group: 'org.jooq', name: 'joox-java-6', version: '1.6.0']
    ]

    minSupportedJavaVersion = JavaVersion.VERSION_1_8
    maxSupportedJavaVersion = JavaVersion.VERSION_21
    isTestBuild = project.hasProperty('testJavaVersion')
    configuredTestJavaVersion = project.findProperty('testJavaVersion')?.toString()?.with { JavaVersion.toVersion(it) }
    assert configuredTestJavaVersion <= maxSupportedJavaVersion:
            "Cannot test with ${configuredTestJavaVersion} because it is higher than max supported version ${maxSupportedJavaVersion}"

    postfixedJar = { File jarFile, String postfix ->
        new File(jarFile.parentFile, jarFile.name.replaceAll(/\.jar$/, "-${postfix}.jar"))
    }

    tempJar = { File jarFile -> postfixedJar(jarFile, 'tmp') }

    productionProjects = [
            project(':archunit'),
            project(':archunit-junit'),
            project(':archunit-junit4'),
            project(':archunit-junit5-api'),
            project(':archunit-junit5-engine-api'),
            project(':archunit-junit5-engine'),
            project(':archunit-junit5')]

    currentScriptRootOf = { it.buildscript.sourceFile.parentFile }
    scriptRelativePath = { context, fileName -> new File(currentScriptRootOf(context), fileName) }
}

description = 'A Java architecture test library, to specify and assert architecture rules in plain Java'

task showJdkVersion {
    println "Configured JDK: ${JavaVersion.current()}"
}

task clean {
    doLast {
        project.buildDir.deleteDir()
    }
}

apply from: 'build-steps/build-steps.gradle'
