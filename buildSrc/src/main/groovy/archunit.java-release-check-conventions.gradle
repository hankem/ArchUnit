import groovy.xml.XmlSlurper

import java.nio.file.Files
import java.util.jar.JarFile

plugins {
    id 'archunit.java-artifact-check-conventions'
}

task ensureReleaseCheckUpToDate {
    doFirst {
        def mavenProject = new XmlSlurper().parseText(getExpectedPomFileContent())
        def releaseCheckDependencies = mavenProject.dependencies.dependency
                .findAll { it.groupId != 'com.tngtech.archunit' }
                .collect {
                    [groupId: it.groupId.toString(), artifactId: it.artifactId.toString(), version: it.version.toString()]
                }

        releaseCheckDependencies.each { releaseCheckDependency ->
            def versionCatalog = versionCatalogs.named("libs")
            def matchingProjectDependency = versionCatalog.libraryAliases.collect { versionCatalog.findLibrary(it).get().get() }.find {
                it.group == releaseCheckDependency.groupId && it.name == releaseCheckDependency.artifactId
            }
            assert matchingProjectDependency != null:
                    "No project dependency was found for expected release dependency ${releaseCheckDependency}"
            assert matchingProjectDependency.version == releaseCheckDependency.version:
                    "Release check dependency version ${releaseCheckDependency} doesn't match " +
                            "project dependency version ${matchingProjectDependency}"
        }
    }
}
check.dependsOn(ensureReleaseCheckUpToDate)

ext.getExpectedPomFileContent = {
    getClass().getResourceAsStream("release_check/${project.name}.pom").text.replace('${archunit.version}', version).stripIndent()
}

task checkUploadedArtifacts {
    doLast {
        def tngRepoId = project.findProperty('tngRepoId') ?: rootProject.closeSonatypeStagingRepository.stagingRepositoryId.get()
        def rootUrl = "https://oss.sonatype.org/service/local/repositories/${tngRepoId}/content/com/tngtech/archunit"

        def createArtifactUrl = { String artifactId ->
            "${rootUrl}/${artifactId}/${version}/${artifactId}-${version}"
        }

        def getUploadedFile = { String artifactId, String ending, String suffix ->
            def fullEnding = (!suffix.isEmpty() ? "-${suffix}" : '') + ".${ending}"
            def tempDir = Files.createTempDirectory('release-check').toFile()
            File result = new File(tempDir, "${artifactId}${fullEnding}")
            result.bytes = new URL("${createArtifactUrl(artifactId)}${fullEnding}").bytes
            result
        }

        def getUploadedPomFileContent = {
            new URL("${createArtifactUrl(project.name)}.pom").text.stripIndent()
        }

        def checkPom = {
            println "Verifying correct POM of ${project.name}"

            String actual = getUploadedPomFileContent()
            String expected = getExpectedPomFileContent()
            if (actual.replaceAll("\\s", "") != expected.replaceAll("\\s", "")) {
                throw new AssertionError("""POM of artifact '${project.name}' does not match:
--------
Actual: 
${actual}
--------
Expected:
${expected}
--------
""")
            }
        }

        def checkSourcesExist = {
            assert getUploadedFile(project.name, 'jar', 'sources') != null
        }

        def checkJavadocExists = {
            assert getUploadedFile(project.name, 'jar', 'javadoc') != null
        }

        checkPom()
        checkSourcesExist()
        checkJavadocExists()

        JarFile jarFile = new JarFile(getUploadedFile(project.name, 'jar', ''))
        checkArtifactContent(jarFile)
    }
}
rootProject.closeSonatypeStagingRepository.finalizedBy(checkUploadedArtifacts)
rootProject.releaseSonatypeStagingRepository.dependsOn(checkUploadedArtifacts)
